"""
Django settings for HGG project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from decouple import config
from pathlib import Path
import os, json
from django.core.exceptions import ImproperlyConfigured
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# secret_file = os.path.join(BASE_DIR, 'secrets.json')

# with open(secret_file) as f:
#     secrets = json.loads(f.read())

# def get_secret(setting):
#     """
#     비밀 변수를 가져오거나 명시적 예외 반환
#     """
#     try:
#         return secrets[setting]
#     except KeyError:
#         error_msg = "Set the {} environment variable".format(setting)
#         raise ImproperlyConfigured(error_msg)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = get_secret("SECRET_KEY")
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# DEBUG = bool( os.environ.get('DJANGO_DEBUG', True) )
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = [
    'hggv1.herokuapp.com',
    '127.0.0.1', # for local test 
]

LOGIN_REDIRECT_URL = '/'

LOGOUT_REDIRECT_URL = '/'

# 웹 서비스의 로그인에 대한 URL 설정 -> "account_login": allauth가 제공하는 login url
# (뷰 접근 제어: LoginRequiredMixin은 로그인이 되어있지 않은 상태면 LOGIN_URL에 설정된 로그인 페이지로 안내함)
LOGIN_URL = "account_login"

ACCOUNT_SIGNUP_REDIRECT_URL = '/'

ACCOUNT_LOGOUT_ON_GET = True # 별로 필요 없을듯?
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'Pages.apps.PagesConfig',
    'APIs.apps.ApisConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'widget_tweaks',
]

SITE_ID = 1

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'HGG.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['HGG/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HGG.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'APIs.validators.CustomPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# 현재 static 파일 경로
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'Pages', 'static')
]
# static 파일 모으는 곳
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 이용자가 업로드한 파일들 모으는 곳
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# 이용자에게 업로드한 파일 보여줄 때 맨 앞에 보이는 URL
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# APIs 앱에 있는 User모델을 이 프로젝트의 User모델로 사용
AUTH_USER_MODEL = "APIs.User"

# 유저 인증 로직을 담당하는 컴포넌트
AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',

]

# 터미널 콘솔로 이메일을 보내도록 하는 설정
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# 이메일로 로그인하고 회원가입
ACCOUNT_AUTHENTICATION_METHOD = "email"

# 회원가입 시 이메일 입력 필수로 변경
ACCOUNT_EMAIL_REQUIRED = True

# username 필드 입력 필수 (default)
ACCOUNT_USERNAME_REQUIRED = True

# 항상 user session 기억하기
ACCOUNT_SESSION_REMEMBER = True
# 쿠키 유효시간 지정
SESSION_COOKIE_AGE = 3600 # 1시간(=3600초)으로 변경

# SignupForm 추가
ACCOUNT_SIGNUP_FORM_CLASS = "APIs.forms.SignupForm"

# 입력 오류 시 비밀번호 유지
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = True

# 이메일 인증 메시지 변경
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# 인증 완료 페이지로 리다이렉션
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "account_email_confirmation_done"
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "account_email_confirmation_done" 

# account email의 제목 앞에 붙는 문자열을 빈 문자열로 만듦
ACCOUNT_EMAIL_SUBJECT_PREFIX = ""

# # Heroku: Update database configuration from $DATABASE_URL.
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)